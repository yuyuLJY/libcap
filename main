#include <pcap.h>
#include <time.h>
#include <stdlib.h>
#include <stdio.h>


//写进文档
//char s[][15]={"sourceIp:172.20.109.88 targetIp:125.39.45.57 sourcePort:8000 targetPort:4015",
//"sourceIp:172.20.109.88 targetIp:202.118.224.101 sourcePort:3457 targetPort:56360",......};
void writeToTxt(char s[][100]){
    FILE *fp;
    //需要判断是否打开成功
    if((fp=fopen("d:\\yuyu\\ip_port.txt","w"))==NULL)
    {
        printf("Cannot open the file,strike any key to exit!\n");
        getchar();
        exit(0);
    }
    for(int i=0;i<100;i++){
        fputs(s[i],fp);
    }
    fclose(fp);//关闭
}

//十六进制转换成十进制
int getSum(char *s){
 int sum=0;
 int len = strlen(s);
 int t;
 for(int i=0;i<len;i++){
  if(s[i]<='9') t = s[i]-'0';
  else t=s[i]-'a'+10;
  sum = sum*16+t;
 }
 return sum;
}

//对抓取到的数据进行分析
void getPacket(u_char * arg, const struct pcap_pkthdr * pkthdr, const u_char * packet)
{
  int * id = (int *)arg;
  
  printf("id: %d\n", ++(*id));
  //数据报文的长度可以使用pcap_pkthdr来获取
  printf("Packet length: %d\n", pkthdr->len);
  printf("Number of bytes: %d\n", pkthdr->caplen);
  
  int i;
  for(i=0; i<pkthdr->len; ++i)
  {
    printf(" %02x", packet[i]);
    if( (i + 1) % 16 == 0 )
    {
      printf("\n");
    }
  }
  
  printf("\n");
  printf("SourceIP: ");
  for(int k=26;k<=29;k++){
     printf("%d",packet[k]);
     if(k!=29){
     printf(".");
     }	
  }
printf("\n");

printf("targetIP: ");
  for(int k=30;k<=33;k++){
     printf("%d",packet[k]);
     if(k!=33){
     printf(".");
     }	
  }
printf("\n");

printf("SourcePort: ");
//int p1 = getSum(itoa(packet[34]));
//int p2 = getSum(itoa(packet[35]));
//int sp = p1*256+p2;
//printf("shiliu1 %X\n",packet[34]);
//printf("shiliu2 %X\n",packet[35]);
//printf("shiliu1 yidong %X\n",packet[34]<<8);
//printf("shiliusum %X\n",(packet[34]<<8)+packet[35]);
printf("%d",(packet[34]<<8)+packet[35]);
printf("\n");


printf("targetPort: ");
printf("%d",(packet[36]<<8)+packet[37]);
printf("\n\n");
}
 
int main()
{
  char errBuf[PCAP_ERRBUF_SIZE], * devStr;
  
  //获取设备
  devStr = pcap_lookupdev(errBuf);
  //判断设备是否获取成功
  if(!devStr)
  {
    printf("error: %s\n", errBuf);
    exit(1);
  }
  
  //找到设备以后，需要获取设备接口
  pcap_t * device = pcap_open_live(devStr, 65535, 1, 0, errBuf);
  
  if(!device)
  {
    printf("error: pcap_open_live(): %s\n", errBuf);
    exit(1);
  }
  
  //循环获取消息
  pcap_loop(device, -1, getPacket, (u_char*)&0);
  
  //关闭设备接口
  pcap_close(device);
 
  return 0;
}
